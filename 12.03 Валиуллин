1.
class Rectangle:
    def __init__(self, x, y, w, h):
        self.x = x  
        self.y = y  
        self.w = w  
        self.h = h  

    def intersection(self, other):
        x_overlap = max(self.x, other.x)
        y_overlap = max(self.y, other.y)
        x_overlap_end = min(self.x + self.w, other.x + other.w)
        y_overlap_end = min(self.y + self.h, other.y + other.h)

        if x_overlap < x_overlap_end and y_overlap < y_overlap_end:
            return Rectangle(x_overlap, y_overlap, x_overlap_end - x_overlap, y_overlap_end - y_overlap)

        return None  

    def get_x(self):
        return self.x

    def get_y(self):
        return self.y

    def get_w(self):
        return self.w

    def get_h(self):
        return self.h

rect1 = Rectangle(0, 0, 10, 10)
rect2 = Rectangle(10, 0, 10, 10)
rect3 = rect1.intersection(rect2)

if rect3 is None:
    print('No intersection')
else:
    print(rect3.get_x(), rect3.get_y(), rect3.get_w(), rect3.get_h())


2.
class LeftParagraph:
    def __init__(self, width):
        self.width = width  
        self.words = []    

    def add_word(self, word):
        self.words.append(word)  

    def end(self):
        paragraph = ' '.join(self.words)
        for line in paragraph.splitlines():
            while len(line) > self.width:
                print(line[:self.width])
                line = line[self.width:]
            print(line)  
        self.words = []  


class RightParagraph:
    def __init__(self, width):
        self.width = width  
        self.words = []     

    def add_word(self, word):
        self.words.append(word)  

    def end(self):
        paragraph = ' '.join(self.words)
        lines = paragraph.splitlines()
        
        for line in lines:
            words_in_line = line.split()
            current_line = ''
            
            for word in words_in_line:
                if len(current_line) + len(word) + (1 if current_line else 0) <= self.width:
                    current_line += (word + ' ') if current_line else word + ' '
                else:
                    print(current_line.rstrip().rjust(self.width))  
                    current_line = word + ' '

            if current_line:  # Печатаем оставшуюся часть строки
                print(current_line.rstrip().rjust(self.width))
        
        self.words = []  


lp = LeftParagraph(8)
lp.add_word('abc')
lp.add_word('defg')
lp.add_word('hi')
lp.add_word('jklmnopq')
lp.add_word('r')
lp.add_word('stuv')

lp.end()
print()

rp = RightParagraph(8)
rp.add_word('abc')
rp.add_word('defg')
rp.add_word('hi')
rp.add_word('jklmnopq')
rp.add_word('r')
rp.add_word('stuv')

rp.end()


3.
class SeaMap:
    def __init__(self):
        self.map = [['.' for _ in range(10)] for _ in range(10)]  
        self.sunk_ships = set()  
        self.hit_cells = set()    

    def shoot(self, row, col, result):
        if result == 'sink':
            self.sunk_ships.add((row, col))
            self.map[row][col] = 'x'  
            self.mark_adjacent_cells(row, col)  
        elif result == 'hit':
            self.hit_cells.add((row, col))
            self.map[row][col] = 'x'  
        elif result == 'miss':
            self.map[row][col] = '*'  

    def mark_adjacent_cells(self, row, col):
        for r in range(max(0, row - 1), min(10, row + 2)):
            for c in range(max(0, col - 1), min(10, col + 2)):
                if (r, c) != (row, col) and self.map[r][c] == '.':
                    self.map[r][c] = '*'  

    def cell(self, row, col):
        if (row, col) in self.hit_cells:
            return 'x'
        elif (row, col) in self.sunk_ships:
            return '*'  
        else:
            return '.'  

sm = SeaMap()
sm.shoot(2, 0, 'sink')
sm.shoot(6, 9, 'hit')

for row in range(10):
    for col in range(10):
        print(sm.cell(row, col), end='')
    print()


4.
class Weapon:
    def __init__(self, name, damage, range):
        self.name = name
        self.damage = damage
        self.range = range

    def hit(self, actor, target):
        if not target.is_alive():
            print("Враг уже повержен")
            return
        
        distance = ((actor.pos_x - target.pos_x) ** 2 + (actor.pos_y - target.pos_y) ** 2) ** 0.5
        if distance > self.range:
            print(f"Враг слишком далеко для оружия <{self.name}>")
        else:
            print(f"Врагу нанесен урон оружием <{self.name}> в размере {self.damage}")
            target.get_damage(self.damage)

    def __str__(self):
        return self.name


class BaseCharacter:
    def __init__(self, pos_x, pos_y, hp):
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.hp = hp

    def move(self, delta_x, delta_y):
        self.pos_x += delta_x
        self.pos_y += delta_y

    def is_alive(self):
        return self.hp > 0

    def get_damage(self, amount):
        self.hp -= amount
        if self.hp <= 0:
            self.hp = 0

    def get_coords(self):
        return (self.pos_x, self.pos_y)


class BaseEnemy(BaseCharacter):
    def __init__(self, pos_x, pos_y, weapon, hp):
        super().__init__(pos_x, pos_y, hp)
        self.weapon = weapon

    def hit(self, target):
        if isinstance(target, MainHero):
            self.weapon.hit(self, target)
        else:
            print("Могу ударить только Главного героя")

    def __str__(self):
        return f"Враг на позиции ({self.pos_x}, {self.pos_y}) с оружием {self.weapon}"


class MainHero(BaseCharacter):
    def __init__(self, pos_x, pos_y, name, hp):
        super().__init__(pos_x, pos_y, hp)
        self.name = name
        self.weapons = []
    
    def hit(self, target):
        if not self.weapons:
            print("Я безоружен")
            return
        
        if isinstance(target, BaseEnemy):
            current_weapon = self.weapons[0]  
            current_weapon.hit(self, target)
        else:
            print("Могу ударить только Врага")

    def add_weapon(self, weapon):
        if isinstance(weapon, Weapon):
            print(f"Подобрал {weapon}")
            if len(self.weapons) == 0:
                self.weapons.append(weapon)  
            elif weapon not in self.weapons:
                self.weapons.append(weapon)
                if len(self.weapons) == 1:  
                    print(f"Сменил оружие на {weapon}")
                else:
                    print(f"Добавлено новое оружие: {weapon}")
        else:
            print("Это не оружие")

    def next_weapon(self):
        if not self.weapons:
            print("Я безоружен")
            return
        
        if len(self.weapons) == 1:
            print("У меня только одно оружие")
            return
        
        current_weapon = self.weapons.pop(0)
        self.weapons.append(current_weapon)
        
        print(f"Сменил оружие на {self.weapons[0]}")

    def heal(self, amount):
        if self.hp > 200:
            amount = 200 - self.hp
        
        self.hp += amount
        print(f"Полечился, теперь здоровья {self.hp}")


# Пример использования классов
weapon1 = Weapon("Короткий меч", 5, 1)
weapon2 = Weapon("Длинный меч", 7, 2)
weapon3 = Weapon("Лук", 3, 10)
weapon4 = Weapon("Лазерная орбитальная пушка", 1000, 1000)

princess = BaseCharacter(100, 100, 100)
archer = BaseEnemy(50, 50, weapon3, 100)
armored_swordsman = BaseEnemy(10, 10, weapon2, 500)

archer.hit(armored_swordsman)  # Удар по врагу
armored_swordsman.move(10, 10)   # Перемещение врага
print(armored_swordsman.get_coords())   # Получение координат врага

main_hero = MainHero(0, 0, "Король Артур", 200)
main_hero.hit(armored_swordsman)   # Удар по врагу
main_hero.next_weapon()             # Смена оружия
main_hero.add_weapon(weapon1)       # Добавление нового оружия
main_hero.hit(armored_swordsman)    # Удар по врагу с новым оружием
main_hero.add_weapon(weapon4)       # Добавление лазерной пушки
main_hero.hit(armored_swordsman)    # Удар по врагу с лазерной пушкой
main_hero.next_weapon()             # Смена оружия на следующее
main_hero.hit(princess)             # Попытка удара по принцессе
main_hero.hit(armored_swordsman)    # Удар по врагу снова
main_hero.hit(armored_swordsman)    # Повторный удар по уже поверженному врагу


5.
class Message:
    def __init__(self, sender, recipient, content):
        self.sender = sender
        self.recipient = recipient
        self.content = content

    def __str__(self):
        return f"From: {self.sender}\nTo: {self.recipient}\n\n{self.content}"


class MailServer:
    def __init__(self, name):
        self.name = name
        self.users = {} 

    def register_user(self, user):
        if user not in self.users:
            self.users[user] = []
            print(f"User {user} registered on server {self.name}.")
        else:
            print(f"User {user} already exists on server {self.name}.")

    def receive_mail(self, user):
        if user in self.users:
            messages = self.users[user]
            if messages:
                return messages.pop(0)  # Возвращаем первое сообщение и удаляем его
            else:
                print(f"No messages for {user} on server {self.name}.")
                return None
        else:
            print(f"User {user} not found on server {self.name}.")
            return None

    def send_mail(self, recipient, message):
        if recipient in self.users:
            self.users[recipient].append(message)
            print(f"Message sent to {recipient} on server {self.name}.")
        else:
            print(f"User {recipient} not found on server {self.name}.")


class MailClient:
    def __init__(self, server, user):
        self.server = server
        self.user = user
        self.server.register_user(user)

    def receive_mail(self):
        message = self.server.receive_mail(self.user)
        if message:
            return str(message)
        return "No new messages."

    def send_mail(self, server_name, recipient, message_content):
        if server_name != self.server.name:
            print(f"Cannot send mail to server {server_name}.")
            return
        
        message = Message(self.user, recipient, message_content)
        self.server.send_mail(recipient, message)


# Пример использования программы

# Создание серверов
server1 = MailServer("Server1")
server2 = MailServer("Server2")

# Создание клиентов
client1 = MailClient(server1, "alice@example.com")
client2 = MailClient(server1, "bob@example.com")
client3 = MailClient(server2, "carol@example.com")

# Отправка сообщений
client1.send_mail("Server1", "bob@example.com", "Hello Bob!")
client2.send_mail("Server1", "alice@example.com", "Hi Alice!")
client3.send_mail("Server2", "alice@example.com", "Hi Alice from Carol!")

# Получение сообщений
print(client1.receive_mail())  # Alice получает сообщение от Bob
print(client2.receive_mail())  # Bob получает сообщение от Alice
print(client3.receive_mail())  # Carol не может отправить сообщение на Server1

# Попытка отправки на несуществующий сервер
client1.send_mail("Server3", "bob@example.com", "This won't work.")
